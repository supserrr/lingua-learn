# LinguaLearn - Language Learning Tool

LinguaLearn is a comprehensive language learning application that helps users translate text, practice pronunciation with text-to-speech functionality, build vocabulary, and practice language skills through interactive exercises.

## Features

- **Text Translation**: Translate text between multiple languages
- **Text-to-Speech**: Listen to proper pronunciation of words and phrases
- **Vocabulary Management**: Save and organize words and phrases you want to learn
- **Practice Exercises**: Interactive exercises to reinforce language learning (flashcards, matching games, fill-in-the-blanks)

## APIs Used

- [Google Cloud Translation API](https://cloud.google.com/translate) - For text translation between languages
- [Google Cloud Text-to-Speech API](https://cloud.google.com/text-to-speech) - For converting text to audio for pronunciation practice
- [Free Dictionary API](https://dictionaryapi.dev/) - For retrieving word definitions and examples

## Tech Stack

- **Frontend**: HTML, CSS, JavaScript
- **Backend**: Node.js with Express
- **Storage**: Local Storage (client-side) for development, could be upgraded to MongoDB or another database for production

## Local Setup

### Prerequisites

- Node.js (v14+) and npm installed
- Google Cloud account with Translation and Text-to-Speech APIs enabled
- API keys for the Google Cloud services

### Installation

1. Clone the repository:
   ```
   git clone https://github.com/yourusername/lingua-learn.git
   cd lingua-learn
   ```

2. Install backend dependencies:
   ```
   npm install
   ```

3. Create a `.env` file in the root directory with your API keys:
   ```
   GOOGLE_API_KEY=your_google_api_key
   PORT=3000
   ```

4. Start the server:
   ```
   npm start
   ```

5. Open your browser and navigate to `http://localhost:3000`

## Deployment

This application is designed to be deployed on two web servers with a load balancer. Here's how to deploy it:

### Server Setup (Web01 and Web02)

1. SSH into your web servers:
   ```
   ssh user@web01_ip_address
   ssh user@web02_ip_address
   ```

2. Clone the repository on each server:
   ```
   git clone https://github.com/yourusername/lingua-learn.git
   cd lingua-learn
   ```

3. Install dependencies on each server:
   ```
   npm install --production
   ```

4. Create the `.env` file with your production environment variables on each server:
   ```
   GOOGLE_API_KEY=your_google_api_key
   PORT=3000
   ```

5. Set up a process manager (e.g., PM2) to keep the application running:
   ```
   npm install -g pm2
   pm2 start backend/server.js --name lingua-learn
   pm2 save
   pm2 startup
   ```

### Load Balancer Configuration (Lb01)

1. SSH into your load balancer:
   ```
   ssh user@lb01_ip_address
   ```

2. Install Nginx:
   ```
   sudo apt update
   sudo apt install nginx
   ```

3. Configure Nginx as a load balancer:
   ```
   sudo nano /etc/nginx/sites-available/lingua-learn
   ```

4. Add the following configuration (replace with your actual server IPs):
   ```
   upstream lingua_servers {
       server web01_ip_address:3000;
       server web02_ip_address:3000;
   }

   server {
       listen 80;
       server_name your_domain.com;

       location / {
           proxy_pass http://lingua_servers;
           proxy_set_header Host $host;
           proxy_set_header X-Real-IP $remote_addr;
           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
           proxy_set_header X-Forwarded-Proto $scheme;
       }
   }
   ```

5. Enable the site and restart Nginx:
   ```
   sudo ln -s /etc/nginx/sites-available/lingua-learn /etc/nginx/sites-enabled/
   sudo nginx -t
   sudo systemctl restart nginx
   ```

### Verifying Load Balancer Configuration

1. Configure health checks by adding to the upstream block:
   ```
   upstream lingua_servers {
       server web01_ip_address:3000 max_fails=3 fail_timeout=30s;
       server web02_ip_address:3000 max_fails=3 fail_timeout=30s;
       least_conn;  # Use least connections algorithm
   }
   ```

2. You can test that the load balancer is working correctly by:
   - Accessing the application through the load balancer IP/domain
   - Temporarily stopping the application on one server to verify the load balancer redirects to the other server
   - Checking the logs on both web servers to confirm they're receiving traffic

## Security Considerations

- API keys are stored as environment variables rather than in the code
- For production, configure HTTPS on your load balancer
- Implement rate limiting for API calls to prevent abuse
- Consider adding authentication for user accounts

## Development Challenges

During the development of this application, several challenges were encountered:

1. **API Integration**: Setting up proper error handling for API requests and responses was crucial to provide a good user experience.

2. **Cross-Browser Compatibility**: The text-to-speech functionality works differently across browsers. We implemented a fallback mechanism for browsers that don't support the Web Speech API.

3. **Load Balancer Configuration**: Ensuring proper health checks and session persistence required careful configuration of the load balancer.

## Future Enhancements

- User authentication and accounts
- Progress tracking and statistics
- More interactive practice exercises
- Mobile application version
- Advanced language learning features like grammar checking

## Credits

- [Google Cloud Translation API](https://cloud.google.com/translate)
- [Google Cloud Text-to-Speech API](https://cloud.google.com/text-to-speech)
- [Free Dictionary API](https://dictionaryapi.dev/)
- Icons from [FontAwesome](https://fontawesome.com/)

## License

This project is licensed under the MIT License - see the LICENSE file for details.
